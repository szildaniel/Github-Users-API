{"version":3,"sources":["components/Header.js","components/Form.js","components/Repo.js","helper.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","theme","icon","size","color","onClick","setTheme","Form","type","onChange","e","setInputText","target","value","search","placeholder","name","Repo","githubRepos","url","options","useState","allRepos","setAllRepos","error","setError","React","isLoading","setIsLoading","reducedRepos","setReducedRepos","useEffect","a","fetch","res","json","fetchData","arr","min","max","fourRepos","length","arrLength","i","randomIndex","Math","ceil","floor","random","push","reduceAllRepos","useRandomUserRepos","message","map","repo","key","language","rel","disabled","href","html_url","Result","loading","result","src","avatar_url","alt","bio","location","repos_url","library","add","faSun","faMoon","faMapMarkerAlt","faLink","searchGithubUser","userName","useSearchGithubUser","inputText","debouncedSearchGithubUser","useConstant","AwesomeDebouncePromise","useAsync","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.a643a6e3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst Header = props => {\r\n  return (\r\n    <header>\r\n      <h1><span className=\"highlight\">Github Users</span></h1>\r\n      {props.theme === \"dark\" ? \r\n        <FontAwesomeIcon icon=\"sun\" size=\"2x\" color=\"#dcba31\"  onClick={ () => props.setTheme('light') }/>\r\n        :  <FontAwesomeIcon icon=\"moon\" size=\"2x\" color=\"#1c132d\" onClick={ () => props.setTheme('dark') }/>}\r\n    </header>\r\n  );\r\n}\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Form = props => {\r\n\r\n  \r\n  return (\r\n    <form>\r\n        <input \r\n          type=\"text\" \r\n          onChange={ e => props.setInputText(e.target.value) } \r\n          value={props.search}\r\n          placeholder=\"username\" \r\n          name=\"input\"/>\r\n    </form>\r\n  );\r\n}\r\nexport default Form;\r\n","import React, {useState, useEffect} from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useAsync } from \"react-async-hook\";\r\nimport randomInt from '../helper';\r\n\r\n\r\nconst fetchGithubRepos = async url => (await fetch(`${url}`)).json();\r\n\r\nfunction useRandomUserRepos(url, options) {\r\n  const [allRepos, setAllRepos] = useState();\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [reducedRepos, setReducedRepos] = useState();\r\n\r\n  useEffect( () => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true)\r\n      try {\r\n        const res = await fetch(url, options);\r\n        const json = await res.json();\r\n        setAllRepos(json);\r\n        setIsLoading(false);\r\n      } \r\n      catch (error) {\r\n        setError(error);\r\n     }\r\n    }; fetchData();\r\n  }, [url])\r\n\r\n  useEffect( () => {\r\n    const reduceAllRepos = arr => {\r\n     const fourRepos = [];\r\n      if(arr && arr.length > 3){\r\n        const arrLength = arr.length;\r\n\r\n        for(let i=0; i<=3; i++){\r\n          const randomIndex = randomInt(0, arrLength);\r\n          fourRepos.push(arr[randomIndex]);\r\n        }\r\n      };\r\n      setReducedRepos(fourRepos);\r\n    }; \r\n    reduceAllRepos(allRepos);\r\n  }, [allRepos])\r\n   \r\n\r\n  return { allRepos, error, isLoading, reducedRepos }\r\n}\r\n\r\nconst Repo = props => {\r\nconst githubRepos = useRandomUserRepos(props.url, {})\r\n  \r\n  return typeof githubRepos.allRepos === 'undefined' ? (\r\n    <h3 className=\"empty__input\">\r\n      That is place for user repositories, please enter username to see user\r\n      repos.\r\n    </h3>\r\n  ) : (\r\n    <div>\r\n      <h2>Repositories</h2>\r\n      {githubRepos.isLoading && <div>Loading</div>}\r\n      {githubRepos.error && <div>Error: {githubRepos.error.message}</div>}\r\n      {githubRepos.reducedRepos &&\r\n        githubRepos.reducedRepos.map((repo, i) => (\r\n          <div className={props.theme === \"dark\"\r\n                ? \"repoContainer\"\r\n                : \"repoContainer lightTheme\"}\r\n              key={i}\r\n          >\r\n            <h3>{repo.name}</h3>\r\n            <p>\r\n              {\" \"}\r\n              language - {repo.language}\r\n              <a\r\n                className=\"repoLink\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                disabled={!props.url}\r\n                href={repo.html_url}\r\n              >\r\n                <FontAwesomeIcon\r\n                  color={props.theme === \"dark\" ? \"white\" : \"black\"}\r\n                  icon=\"link\"\r\n                />\r\n              </a>\r\n            </p>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Repo;\r\n","export default function randomInt(min, max){\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n}","import React from \"react\";\r\nimport Repo from \"./Repo\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst Result = props => {\r\n  const { loading, error, result } = props.search;\r\n \r\n  return (\r\n    <div>\r\n      {loading && <div className=\"loadingDiv\">Loading user data ... </div>}\r\n      {error && <div>Error: {error.message}</div>}\r\n      {result && (\r\n        <div className=\"resultContainer\">\r\n          <div className=\"resultLeft\">\r\n            <img src={\r\n              props.search.result.length === 0 ? \r\n              `./img/default-user.png` :\r\n              props.search.result.avatar_url\r\n              } \r\n              alt=\"Avatar\" />\r\n            <h2>{\r\n            props.search.result.length === 0 ? \r\n            'Enter username in input' :\r\n            props.search.result.name\r\n            }\r\n            </h2>\r\n            <p className=\"bio\">{props.search.result.bio}</p>\r\n            <div className=\"location\">\r\n              <span>\r\n                <FontAwesomeIcon icon=\"map-marker-alt\" />\r\n              </span>\r\n              <span className=\"locationText\">\r\n                {\r\n                props.search.result.length === 0 ? \r\n                'Somewhere in wonderfull world' :\r\n                props.search.result.location\r\n                }\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div className=\"resultRight\">\r\n            <Repo theme={props.theme} url={props.search.result.repos_url} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Result;\r\n","import React, { useState } from 'react';\nimport Header from './Header';\nimport Form from './Form';\nimport Result from './Result';\n\nimport { useAsync } from 'react-async-hook';\nimport useConstant from \"use-constant\";\nimport  AwesomeDebouncePromise  from 'awesome-debounce-promise';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faSun, faMoon, faMapMarkerAlt, faLink } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faSun, faMoon, faMapMarkerAlt, faLink);\n\nconst searchGithubUser = async userName =>\n  (await fetch(`https://api.github.com/users/${userName}`)).json();\n\nfunction useSearchGithubUser() {\n  const [inputText, setInputText] = useState(\"\");\n\n  const debouncedSearchGithubUser = useConstant( () =>\n    AwesomeDebouncePromise(searchGithubUser, 300)\n  );\n\n  const search = useAsync(\n    async () => {\n      if (inputText.length === 0) {\n        return [];\n      } else {\n        return debouncedSearchGithubUser(inputText);\n      }\n    },\n    [inputText]\n  );\n\n  return {\n    inputText,\n    setInputText,\n    search\n  };\n};\n\n\nfunction App() {\n  const [theme, setTheme] = useState('dark');\n  const {inputText, setInputText, search} = useSearchGithubUser();\n\n  return (\n      <div className= { theme==='dark' ? \"App\" : \"App light\" }>\n        <Header theme={theme} setTheme={setTheme} />\n        <Form  setInputText={setInputText}/>\n        <Result \n        useSearchGithubUser={useSearchGithubUser} search={search}\n        theme={theme}/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/style.scss';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}