{"version":3,"sources":["components/Header.js","components/Form.js","components/RepoList.js","components/Repo.js","helper.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","theme","icon","size","color","onClick","setTheme","Form","type","onChange","e","setInputText","target","value","search","placeholder","name","RepoList","parentRef","useRef","useState","noRepos","setNoRepos","useEffect","repos","length","gsap","to","current","children","autoAlpha","stagger","ref","map","repo","i","key","language","rel","disabled","url","href","html_url","fetchGithubRepos","a","fetch","json","Repo","githubRepos","options","reducedRepos","setReducedRepos","debouncedFetchGithubUser","useConstant","AwesomeDebouncePromise","allRepos","useAsync","arr","min","max","fourRepos","arrLength","randomIndex","Math","ceil","floor","random","push","reduceAllRepos","result","useRandomUserRepos","loading","error","message","Result","src","avatar_url","alt","bio","location","repos_url","library","add","faSun","faMoon","faMapMarkerAlt","faLink","searchGithubUser","userName","useSearchGithubUser","inputText","debouncedSearchGithubUser","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.eb7d214a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst Header = props => {\r\n  return (\r\n    <header>\r\n      <h1><span className=\"highlight\">Github Users</span></h1>\r\n      {props.theme === \"dark\" ? \r\n        <FontAwesomeIcon icon=\"sun\" size=\"2x\" color=\"#dcba31\"  onClick={ () => props.setTheme('light') }/>\r\n        :  <FontAwesomeIcon icon=\"moon\" size=\"2x\" color=\"#1c132d\" onClick={ () => props.setTheme('dark') }/>}\r\n    </header>\r\n  );\r\n}\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Form = props => {\r\n\r\n  \r\n  return (\r\n    <form>\r\n        <input \r\n          type=\"text\" \r\n          onChange={ e => props.setInputText(e.target.value) } \r\n          value={props.search}\r\n          placeholder=\"username\" \r\n          name=\"input\"/>\r\n    </form>\r\n  );\r\n}\r\nexport default Form;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { gsap } from \"gsap\";\r\n\r\nconst RepoList = (props) => {\r\n    const parentRef = useRef(null);\r\n    const [noRepos, setNoRepos] = useState(true);\r\n\r\n    useEffect( () => {\r\n        const showRepos = () => {\r\n            props.repos.length > 0 ? setNoRepos(false) : setNoRepos(true);\r\n        }\r\n        showRepos();\r\n    }, [props.repos])\r\n    \r\n\r\n    useEffect( () => {\r\n      gsap.to(parentRef.current.children,\r\n        \r\n        {autoAlpha: 1, stagger: 0.25})\r\n      },[props.repos])\r\n\r\n  return (\r\n    <>\r\n      {noRepos &&  <p className=\"noRepos\">That's place for user repositories search for username and see user repos.</p>}\r\n      {props.repos && (\r\n        <div className=\"allRepos\" ref={parentRef}>\r\n          {props.repos.map((repo, i) => (\r\n            <div\r\n              className={\r\n                props.theme === \"dark\"\r\n                  ? \"repoContainer\"\r\n                  : \"repoContainer lightTheme\"\r\n              }\r\n              key={i}\r\n            >\r\n              <h3>{repo.name}</h3>\r\n              <p>\r\n                language - {repo.language}\r\n                <a\r\n                  className=\"repoLink\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  disabled={!props.url}\r\n                  href={repo.html_url}\r\n                >\r\n                  <FontAwesomeIcon\r\n                    color={props.theme === \"dark\" ? \"white\" : \"black\"}\r\n                    icon=\"link\"\r\n                  />\r\n                </a>\r\n              </p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default RepoList;","import React, {useState, useEffect} from \"react\";\r\nimport RepoList from './RepoList';\r\n\r\nimport { useAsync } from 'react-async-hook';\r\nimport useConstant from \"use-constant\";\r\nimport AwesomeDebouncePromise  from 'awesome-debounce-promise';\r\n\r\nimport randomInt from '../helper';\r\n\r\nconst fetchGithubRepos = async url => (await fetch(`${url}`)).json();\r\n  \r\nfunction useRandomUserRepos(url, options) {\r\n \r\n    const [reducedRepos, setReducedRepos] = useState();\r\n    const debouncedFetchGithubUser = useConstant( () => \r\n      AwesomeDebouncePromise(fetchGithubRepos, 300)\r\n    );\r\n\r\n    const allRepos = useAsync(\r\n      async () => {\r\n        if(!url){\r\n          return [];\r\n        }\r\n        else {\r\n          return debouncedFetchGithubUser(url);\r\n        }\r\n      },\r\n      [url]\r\n    );\r\n\r\n  useEffect( () => {\r\n    const reduceAllRepos = arr => {\r\n     const fourRepos = [];\r\n      if(arr && arr.length > 3){\r\n        const arrLength = arr.length;\r\n\r\n        for(let i=0; i<=3; i++){\r\n          const randomIndex = randomInt(0, arrLength);\r\n          fourRepos.push(arr[randomIndex]);\r\n        }\r\n      };\r\n      setReducedRepos(fourRepos);\r\n    }; \r\n    reduceAllRepos(allRepos.result);\r\n\r\n  }, [allRepos.result])\r\n   \r\n  return { allRepos, reducedRepos };\r\n};\r\n\r\nconst Repo = props => {\r\nconst [url, setUrl] = useState(props.url);\r\nconst githubRepos = useRandomUserRepos(url, {})\r\nconst {loading, error, result} = githubRepos.allRepos;\r\n\r\n\r\n  return  (\r\n    <div>\r\n      <h2>Repositories</h2>\r\n      {loading && <div>Loading</div>}\r\n      {error && <div>Error: {error.message}</div>}\r\n      {result && (<RepoList theme={props.theme} repos={githubRepos.reducedRepos}/>)\r\n       }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Repo;\r\n","export default function randomInt(min, max){\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n}","import React from \"react\";\r\nimport Repo from \"./Repo\";\r\nimport Error from \"./Error\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst Result = props => {\r\n  const { loading, error, result } = props.search;\r\n \r\n  return (\r\n    <div>\r\n      {loading && <div className=\"loadingDiv\">Loading user data ... </div>}\r\n      {error && <div>Error: {error.message}</div>}\r\n      {result && (\r\n        <div className=\"resultContainer\">\r\n          <div className=\"resultLeft\">\r\n            <img src={\r\n              result.length === 0 ? \r\n              `/Github-Users-API/img/default-user.png` :\r\n              result.avatar_url\r\n              } \r\n              alt=\"Avatar\" />\r\n            <h2>{\r\n            result.length === 0 ? \r\n            'Enter username in input' :\r\n            result.name\r\n            }\r\n            </h2>\r\n            <p className=\"bio\">{result.bio}</p>\r\n            <div className=\"location\">\r\n              <span>\r\n                <FontAwesomeIcon icon=\"map-marker-alt\" />\r\n              </span>\r\n              <span className=\"locationText\">\r\n                {\r\n                result.length === 0 ? \r\n                'Somewhere in wonderfull world' :\r\n                result.location\r\n                }\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div className=\"resultRight\">\r\n            <Repo theme={props.theme} url={result.repos_url} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Result;\r\n","import React, { useState } from 'react';\r\nimport Header from './Header';\r\nimport Form from './Form';\r\nimport Result from './Result';\r\n\r\nimport { useAsync } from 'react-async-hook';\r\nimport useConstant from \"use-constant\";\r\nimport  AwesomeDebouncePromise  from 'awesome-debounce-promise';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faSun, faMoon, faMapMarkerAlt, faLink } from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(faSun, faMoon, faMapMarkerAlt, faLink);\r\n\r\nconst searchGithubUser = async userName =>\r\n  (await fetch(`https://api.github.com/users/${userName}`)).json();\r\n\r\nfunction useSearchGithubUser() {\r\n  const [inputText, setInputText] = useState(\"\");\r\n\r\n  const debouncedSearchGithubUser = useConstant( () =>\r\n    AwesomeDebouncePromise(searchGithubUser, 300)\r\n  );\r\n\r\n  const search = useAsync(\r\n    async () => {\r\n      if (inputText.length === 0) {\r\n        return [];\r\n      } else {\r\n        return debouncedSearchGithubUser(inputText);\r\n      }\r\n    },\r\n    [inputText]\r\n  );\r\n\r\n  return {\r\n    inputText,\r\n    setInputText,\r\n    search\r\n  };\r\n};\r\n\r\n\r\nfunction App() {\r\n  const [theme, setTheme] = useState('dark');\r\n  const {inputText, setInputText, search} = useSearchGithubUser();\r\n\r\n  return (\r\n      <div className= { theme==='dark' ? \"App\" : \"App light\" }>\r\n        <Header theme={theme} setTheme={setTheme} />\r\n        <Form  setInputText={setInputText}/>\r\n        <Result \r\n        useSearchGithubUser={useSearchGithubUser} search={search}\r\n        theme={theme}/>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/style.scss';\r\n\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}